class Solution {
public:
    bool issafe(int row,int col,vector<string>&board,int n,vector<vector<string>>&ans){
            int r=row;
        int c=col;
        while(row>=0&&col>=0){
        if(board[row][col]=='Q')return false;
            row--;
            col--;
        }
        row=r;
        col=c;
        while(col>=0){
      if(board[row][col]=='Q')return false;
        col--;
        }
        row=r;
        col=c;
        while(row<n&&col>=0){
       if(board[row][col]=='Q')return false;
        row++;
        col--;
        }
        return true;
        
    }
    void solve(int col,vector<string>&board,int n , vector<vector<string>>&ans){
       int  row=0;
        if(col==n){
           ans.push_back(board);
        return ;
        }
        for(int row=0;row<n;row++){
                 if(issafe(row,col,board,n,ans)==true){board[row][col]='Q';
                 solve(col+1,board,n,ans);
                  board[row][col]='.';}
        }
    }
    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>>ans;
        vector<string>board;
        string s(n,'.');
        for(int i=0;i<n;i++)
        {
           board.push_back(s);
        }
        solve(0,board,n,ans);
        return ans;
    }
};
